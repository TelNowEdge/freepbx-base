<script type="text/javascript">
 const clearDestination = (destination, addText) => {
   if (typeof addText === 'undefined') {
     addText = true;
   }

   $(destination)
     .empty()
     .append(
       addText === true
       ? '<option value="">{{ 'Choose category before' | fpbxtrans }}</option>'
       : ''
     )
   ;
 };

 const getCategoryByDestination = (destSelector, categorySelector, destination) => {
   const prototype = $(destSelector).data('prototype');

   return new Promise((resolve, reject) => {
     Object.keys(prototype).forEach((x) => {
       prototype[x].forEach((z) => {
         if (z.destination === destination) {
           if (z.category === 'Error') {
             reject(z);
           }

           resolve(z);
         }
       });
     });
   });
 };

 const appendDestinationByCategory = (selector, category) => {
   const prototype = $(selector).data('prototype');

   const actual = $(selector).val();
   clearDestination(selector, false);

   prototype[category].forEach((x) => {
     $('<option />', {
       selected: actual === x.destination ? true : '',
       text: x.description,
       value: x.destination
     }).appendTo(selector);
   });
 };

 const processForm = (category, destination) => {
   const actualState = $(destination).val();

   if (actualState) {
     getCategoryByDestination(destination, category, actualState)
       .then((x) => {
         $(category)
           .find('option:selected')
           .removeAttr('selected')
         ;

         $(category)
           .find('option[value="' + x.category + '"]')
           .prop('selected', true)
         ;

         appendDestinationByCategory(destination, x.category);
       })
       .catch((x) => {
         clearDestination(destination);

         $('<option />', {
           text: actualState,
           value: '',
           selected: true
         }).appendTo(destination)
         ;

         $(category)
           .attr('style', 'background-color: rgba(255, 0, 0, 0.5);')
           .find('option[value="' + x.category + '"]')
           .attr('selected', 'selected')
         ;

         $(destination)
           .attr('style', 'background-color: rgba(255, 0, 0, 0.5);')
         ;
       })
     ;
   } else {
     clearDestination(destination);
   }

   $(category)
     .on('change', (e) => {
       const val = $(e.currentTarget).val();

       if (!val) {
         clearDestination(destination)

         return;
       }

       $(category)
         .removeAttr('style')
         .find('option[value="Error"]')
         .remove();
       ;

       $(destination)
         .removeAttr('style')
       ;

       appendDestinationByCategory(destination, val);
     });

 }
</script>
